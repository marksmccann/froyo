"use strict";(self.webpackChunkfroyo=self.webpackChunkfroyo||[]).push([[4085],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},b="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),b=c(n),d=r,m=b["".concat(o,".").concat(d)]||b[d]||p[d]||l;return n?a.createElement(m,s(s({ref:t},u),{},{components:n})):a.createElement(m,s({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,s=new Array(l);s[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[b]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<l;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7294),r=n(6010);const l="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,s),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>E});var a=n(7462),r=n(7294),l=n(6010),s=n(2466),i=n(6550),o=n(1980),c=n(7392),u=n(12);function b(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??b(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=p(e),[s,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[o,c]=m({queryString:n,groupId:a}),[b,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),h=(()=>{const e=o??b;return d({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),f(e)}),[c,f,l]),tabValues:l}}var h=n(2389);const v="tabList__CuJ",y="tabItem_LNqP";function g(e){let{className:t,block:n,selectedValue:i,selectValue:o,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:b}=(0,s.o5)(),p=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==i&&(b(t),o(a))},d=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:d,onClick:p},s,{className:(0,l.Z)("tabs__item",y,s?.className,{"tabs__item--active":i===t})}),n??t)})))}function T(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function k(e){const t=f(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",v)},r.createElement(g,(0,a.Z)({},e,t)),r.createElement(T,(0,a.Z)({},e,t)))}function E(e){const t=(0,h.Z)();return r.createElement(k,(0,a.Z)({key:String(t)},e))}},4643:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>b});var a=n(7462),r=(n(7294),n(3905)),l=n(4866),s=n(5162);const i={},o="Component Example",c={unversionedId:"getting-started/component-example",id:"getting-started/component-example",title:"Component Example",description:"The following is an example of a basic Tabs component built with Froyo.",source:"@site/docs/getting-started/component-example.md",sourceDirName:"getting-started",slug:"/getting-started/component-example",permalink:"/froyo/docs/getting-started/component-example",draft:!1,editUrl:"https://github.com/marksmccann/froyo/docs/getting-started/component-example.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Creating a Component",permalink:"/froyo/docs/getting-started/creating-a-component"},next:{title:"Handling Updates",permalink:"/froyo/docs/fundamentals/handling-updates"}},u={},b=[{value:"Initial HTML",id:"initial-html",level:2},{value:"Component Definition",id:"component-definition",level:2},{value:"Initialization",id:"initialization",level:2},{value:"Rendered Markup",id:"rendered-markup",level:2}],p={toc:b};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"component-example"},"Component Example"),(0,r.kt)("p",null,"The following is an example of a basic ",(0,r.kt)("inlineCode",{parentName:"p"},"Tabs")," component built with Froyo."),(0,r.kt)("h2",{id:"initial-html"},"Initial HTML"),(0,r.kt)("p",null,"The initial markup for this component includes the content for three tabs and panels."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div class="tabs">\n    <div class="tabs__tablist">\n        <button class="tabs__tab">Tab 1</button>\n        <button class="tabs__tab">Tab 2</button>\n        <button class="tabs__tab">Tab 3</button>\n    </div>\n    <div class="tabs__panel">Panel 1</div>\n    <div class="tabs__panel">Panel 2</div>\n    <div class="tabs__panel">Panel 3</div>\n</div>\n')),(0,r.kt)("h2",{id:"component-definition"},"Component Definition"),(0,r.kt)("p",null,"This is the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tabs")," class definition using the primary features of the framework."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"js",label:"JavaScript",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import PropTypes from 'prop-types';\nimport {\n    Component,\n    addEventListener,\n    setAttributes,\n    setClasses,\n} from 'froyojs';\n\nclass Tabs extends Component {\n    static get stateTypes() {\n        return {\n            activeTab: PropTypes.number,\n        };\n    }\n\n    static get defaultState() {\n        return {\n            activeTab: 0,\n        };\n    }\n\n    setup() {\n        const { rootElement } = this;\n\n        this.elements = {\n            tablist: rootElement.querySelector('.tabs__tablist'),\n            tabs: Array.from(rootElement.querySelectorAll('.tabs__tab')),\n            panels: Array.from(rootElement.querySelectorAll('.tabs__panel')),\n        };\n\n        this.listeners = {\n            click: addEventListener(\n                rootElement,\n                'click',\n                this.handleClick.bind(this)\n            ),\n        };\n    }\n\n    validate(stateChanges) {\n        const { tabs, panels } = this.elements;\n        const { activeTab } = this.state;\n\n        if (!this.initialized) {\n            if (tabs.length !== panels.length) {\n                console.error(\n                    'There must be an equal number of tabs and panels'\n                );\n            }\n        }\n\n        if ('activeTab' in stateChanges) {\n            if (activeTab < 0 || activeTab >= tabs.length) {\n                console.error(`There is no tab at index \"${activeTab}\"`);\n            }\n        }\n    }\n\n    handleClick(event) {\n        const { tabs } = this.elements;\n\n        if (tabs.includes(event.target)) {\n            this.setState({\n                activeTab: tabs.indexOf(event.target),\n            });\n        }\n    }\n\n    render(stateChanges) {\n        const { tablist, tabs, panels } = this.elements;\n        const { activeTab } = this.state;\n\n        if (!this.initialized) {\n            setAttributes(tablist, { role: 'tablist' });\n\n            tabs.forEach((tab, index) => {\n                setAttributes(tab, {\n                    type: 'button',\n                    role: 'tab',\n                    id: `tab-${index}`,\n                    'aria-controls': `panel-${index}`,\n                });\n            });\n\n            panels.forEach((panel, index) => {\n                setAttributes(panel, {\n                    role: 'tabpanel',\n                    id: `panel-${index}`,\n                    'aria-labelledby': `tab-${index}`,\n                });\n            });\n        }\n\n        if ('activeTab' in stateChanges) {\n            tabs.forEach((tab, index) => {\n                setClasses(tab, { 'tabs__tab--active': activeTab === index });\n                setAttributes(tab, {\n                    'aria-selected': activeTab === index ? 'true' : 'false',\n                });\n            });\n\n            panels.forEach((panel, index) => {\n                setClasses(panel, {\n                    'tabs__panel--active': activeTab === index,\n                });\n            });\n        }\n    }\n}\n"))),(0,r.kt)(s.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import PropTypes from 'prop-types';\nimport {\n    Component,\n    addEventListener,\n    setAttributes,\n    setClasses,\n} from 'froyojs';\n\ntype State = {\n    activeTab: number;\n};\n\ntype Elements = {\n    tablist: Element | null;\n    tabs: Element[];\n    panels: Element[];\n};\n\ntype Listeners = {\n    click: ReturnType<typeof addEventListener>;\n};\n\nclass Tabs extends Component<State, Elements, Listeners> {\n    static get stateTypes() {\n        return {\n            activeTab: PropTypes.number,\n        };\n    }\n\n    static get defaultState() {\n        return {\n            activeTab: 0,\n        };\n    }\n\n    protected setup() {\n        const { rootElement } = this;\n\n        this.elements = {\n            tablist: rootElement.querySelector('.tabs__tablist'),\n            tabs: Array.from(rootElement.querySelectorAll('.tabs__tab')),\n            panels: Array.from(rootElement.querySelectorAll('.tabs__panel')),\n        };\n\n        this.listeners = {\n            click: addEventListener(\n                rootElement,\n                'click',\n                this.handleClick.bind(this)\n            ),\n        };\n    }\n\n    protected validate(stateChanges: Partial<State>) {\n        const { tabs, panels } = this.elements;\n        const { activeTab } = this.state;\n\n        if (!this.initialized) {\n            if (tabs.length !== panels.length) {\n                console.error(\n                    'There must be an equal number of tabs and panels'\n                );\n            }\n        }\n\n        if ('activeTab' in stateChanges) {\n            if (activeTab < 0 || activeTab >= tabs.length) {\n                console.error(`There is no tab at index \"${activeTab}\"`);\n            }\n        }\n    }\n\n    private handleClick(event: Event) {\n        const { tabs } = this.elements;\n\n        if (event.target instanceof Element && tabs.includes(event.target)) {\n            this.setState({\n                activeTab: tabs.indexOf(event.target),\n            });\n        }\n    }\n\n    protected render(stateChanges: Partial<State>) {\n        const { tablist, tabs, panels } = this.elements;\n        const { activeTab } = this.state;\n\n        if (!this.initialized) {\n            if (tablist) {\n                setAttributes(tablist, { role: 'tablist' });\n            }\n\n            tabs.forEach((tab, index) => {\n                setAttributes(tab, {\n                    type: 'button',\n                    role: 'tab',\n                    id: `tab-${index}`,\n                    'aria-controls': `panel-${index}`,\n                });\n            });\n\n            panels.forEach((panel, index) => {\n                setAttributes(panel, {\n                    role: 'tabpanel',\n                    id: `panel-${index}`,\n                    'aria-labelledby': `tab-${index}`,\n                });\n            });\n        }\n\n        if ('activeTab' in stateChanges) {\n            tabs.forEach((tab, index) => {\n                setClasses(tab, { 'tabs__tab--active': activeTab === index });\n                setAttributes(tab, {\n                    'aria-selected': activeTab === index ? 'true' : 'false',\n                });\n            });\n\n            panels.forEach((panel, index) => {\n                setClasses(panel, {\n                    'tabs__panel--active': activeTab === index,\n                });\n            });\n        }\n    }\n}\n")))),(0,r.kt)("h2",{id:"initialization"},"Initialization"),(0,r.kt)("p",null,"This is how the component would be initialized."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Alternatively, components can be initialized with a ",(0,r.kt)("a",{parentName:"p",href:"/froyo/docs/api/component#constructor"},"query selector")," or ",(0,r.kt)("a",{parentName:"p",href:"/froyo/docs/fundamentals/html-only-usage"},"from the HTML"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const instance = new Tabs(document.querySelector('.tabs'));\n")),(0,r.kt)("h2",{id:"rendered-markup"},"Rendered Markup"),(0,r.kt)("p",null,"This is what the rendered HTML would look like after initialization."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div class="tabs">\n    <div class="tabs__tablist" role="tablist">\n        <button\n            class="tabs__tab tabs__tab--active"\n            type="button"\n            role="tab"\n            id="tab-0"\n            aria-controls="panel-0"\n            aria-selected="true"\n        >\n            Tab 1\n        </button>\n        <button\n            class="tabs__tab"\n            type="button"\n            role="tab"\n            id="tab-1"\n            aria-controls="panel-1"\n            aria-selected="false"\n        >\n            Tab 2\n        </button>\n        <button\n            class="tabs__tab"\n            type="button"\n            role="tab"\n            id="tab-2"\n            aria-controls="panel-2"\n            aria-selected="false"\n        >\n            Tab 3\n        </button>\n    </div>\n    <div\n        class="tabs__panel tabs__panel--active"\n        role="panel"\n        id="panel-0"\n        aria-labelledby="tab-0"\n    >\n        Panel 1\n    </div>\n    <div class="tabs__panel" role="panel" id="panel-1" aria-labelledby="tab-1">\n        Panel 2\n    </div>\n    <div class="tabs__panel" role="panel" id="panel-2" aria-labelledby="tab-2">\n        Panel 3\n    </div>\n</div>\n')))}d.isMDXComponent=!0}}]);