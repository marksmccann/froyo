"use strict";(self.webpackChunkfroyo=self.webpackChunkfroyo||[]).push([[4085],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},b="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),b=c(t),u=i,m=b["".concat(s,".").concat(u)]||b[u]||d[u]||r;return t?a.createElement(m,l(l({ref:n},p),{},{components:t})):a.createElement(m,l({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[b]="string"==typeof e?e:i,l[1]=o;for(var c=2;c<r;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4643:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>b,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=t(7462),i=(t(7294),t(3905));const r={},l="Component Example",o={unversionedId:"getting-started/component-example",id:"getting-started/component-example",title:"Component Example",description:"The following is an example of a basic Tabs component built with Froyo.",source:"@site/docs/getting-started/component-example.md",sourceDirName:"getting-started",slug:"/getting-started/component-example",permalink:"/froyo/docs/getting-started/component-example",draft:!1,editUrl:"https://github.com/marksmccann/froyo/docs/getting-started/component-example.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Creating a Component",permalink:"/froyo/docs/getting-started/creating-a-component"},next:{title:"Handling Updates",permalink:"/froyo/docs/fundamentals/handling-updates"}},s={},c=[{value:"Initial HTML",id:"initial-html",level:2},{value:"Component Definition",id:"component-definition",level:2},{value:"Initialization",id:"initialization",level:2},{value:"Rendered Markup",id:"rendered-markup",level:2}],p={toc:c};function b(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"component-example"},"Component Example"),(0,i.kt)("p",null,"The following is an example of a basic ",(0,i.kt)("inlineCode",{parentName:"p"},"Tabs")," component built with Froyo."),(0,i.kt)("h2",{id:"initial-html"},"Initial HTML"),(0,i.kt)("p",null,"The initial markup for this component includes the content for three tabs and panels."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<div class="tabs">\n    <div class="tabs__tablist">\n        <button class="tabs__tab">Tab 1</button>\n        <button class="tabs__tab">Tab 2</button>\n        <button class="tabs__tab">Tab 3</button>\n    </div>\n    <div class="tabs__panel">Panel 1</div>\n    <div class="tabs__panel">Panel 2</div>\n    <div class="tabs__panel">Panel 3</div>\n</div>\n')),(0,i.kt)("h2",{id:"component-definition"},"Component Definition"),(0,i.kt)("p",null,"This is the ",(0,i.kt)("inlineCode",{parentName:"p"},"Tabs")," class definition using the core features of the framework."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import PropTypes from 'prop-types';\nimport {\n    Component,\n    addEventListener,\n    setAttributes,\n    querySelector,\n    querySelectorAll,\n} from 'froyojs';\n\nclass Tabs extends Component {\n    static get stateTypes() {\n        return {\n            activeTab: PropTypes.number,\n        };\n    }\n\n    static get defaultState() {\n        return {\n            activeTab: 0,\n        };\n    }\n\n    setup() {\n        const { rootElement } = this;\n\n        this.elements = {\n            tablist: querySelector(rootElement, '.tabs__tablist'),\n            tabs: querySelectorAll(rootElement, '.tabs__tab'),\n            panels: querySelectorAll(rootElement, '.tabs__panel'),\n        };\n\n        this.listeners = {\n            click: addEventListener(\n                rootElement,\n                'click',\n                this.handleClick.bind(this)\n            ),\n        };\n    }\n\n    validate(stateChanges) {\n        const { tabs, panels } = this.elements;\n        const { activeTab } = this.state;\n\n        if (!this.initialized) {\n            if (tabs.length !== panels.length) {\n                console.error(\n                    'There must be an equal number of tabs and panels'\n                );\n            }\n        }\n\n        if ('activeTab' in stateChanges) {\n            if (activeTab < 0 || activeTab >= tabs.length) {\n                console.error(`There is no tab at index \"${activeTab}\"`);\n            }\n        }\n    }\n\n    handleClick(event) {\n        const { tabs } = this.elements;\n\n        if (tabs.includes(event.target)) {\n            this.setState({\n                activeTab: tabs.indexOf(event.target),\n            });\n        }\n    }\n\n    render(stateChanges) {\n        const { tablist, tabs, panels } = this.elements;\n        const { activeTab } = this.state;\n\n        if (!this.initialized) {\n            setAttributes(tablist, { role: 'tablist' });\n\n            tabs.forEach((tab, index) => {\n                setAttributes(tab, {\n                    type: 'button',\n                    role: 'tab',\n                    id: `tab-${index}`,\n                    'aria-controls': `panel-${index}`,\n                });\n            });\n\n            panels.forEach((panel, index) => {\n                setAttributes(panel, {\n                    role: 'tabpanel',\n                    id: `panel-${index}`,\n                    'aria-labelledby': `tab-${index}`,\n                });\n            });\n        }\n\n        if ('activeTab' in stateChanges) {\n            tabs.forEach((tab, index) => {\n                setAttributes(tab, {\n                    'aria-selected': activeTab === index,\n                });\n\n                if (activeTab === index) {\n                    tab.classList.add('tabs__tab--active');\n                } else {\n                    tab.classList.remove('tabs__tab--active');\n                }\n            });\n\n            panels.forEach((panel, index) => {\n                if (activeTab === index) {\n                    panel.classList.add('tabs__panel--active');\n                } else {\n                    panel.classList.remove('tabs__panel--active');\n                }\n            });\n        }\n    }\n}\n")),(0,i.kt)("h2",{id:"initialization"},"Initialization"),(0,i.kt)("p",null,"This is how the component would be initialized."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Alternatively, components can be initialized with a ",(0,i.kt)("a",{parentName:"p",href:"/froyo/docs/api/component#constructor"},"query selector")," or ",(0,i.kt)("a",{parentName:"p",href:"/froyo/docs/fundamentals/html-only-usage"},"from the HTML"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const instance = new Tabs(document.querySelector('.tabs'));\n")),(0,i.kt)("h2",{id:"rendered-markup"},"Rendered Markup"),(0,i.kt)("p",null,"This is what the rendered HTML would look like after initialization."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<div class="tabs">\n    <div class="tabs__tablist" role="tablist">\n        <button\n            class="tabs__tab tabs__tab--active"\n            type="button"\n            role="tab"\n            id="fU1a7rWg-tab-0"\n            aria-controls="fU1a7rWg-panel-0"\n            aria-selected="true"\n        >\n            Tab 1\n        </button>\n        <button\n            class="tabs__tab"\n            type="button"\n            role="tab"\n            id="fU1a7rWg-tab-1"\n            aria-controls="fU1a7rWg-panel-1"\n            aria-selected="false"\n        >\n            Tab 2\n        </button>\n        <button\n            class="tabs__tab"\n            type="button"\n            role="tab"\n            id="fU1a7rWg-tab-2"\n            aria-controls="fU1a7rWg-panel-2"\n            aria-selected="false"\n        >\n            Tab 3\n        </button>\n    </div>\n    <div\n        class="tabs__panel tabs__panel--active"\n        role="panel"\n        id="fU1a7rWg-panel-0"\n        aria-labelledby="fU1a7rWg-tab-0"\n    >\n        Panel 1\n    </div>\n    <div\n        class="tabs__panel"\n        role="panel"\n        id="fU1a7rWg-panel-1"\n        aria-labelledby="fU1a7rWg-tab-1"\n    >\n        Panel 2\n    </div>\n    <div\n        class="tabs__panel"\n        role="panel"\n        id="fU1a7rWg-panel-2"\n        aria-labelledby="fU1a7rWg-tab-2"\n    >\n        Panel 3\n    </div>\n</div>\n')))}b.isMDXComponent=!0}}]);