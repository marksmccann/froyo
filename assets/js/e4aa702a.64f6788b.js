"use strict";(self.webpackChunkfroyo=self.webpackChunkfroyo||[]).push([[5785],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(r),b=o,m=u["".concat(c,".").concat(b)]||u[b]||d[b]||a;return r?n.createElement(m,s(s({ref:t},l),{},{components:r})):n.createElement(m,s({ref:t},l))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=b;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},4341:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const a={},s="Observer Pattern",i={unversionedId:"advanced/observer-pattern",id:"advanced/observer-pattern",title:"Observer Pattern",description:"This guide introduces the concept of the observer pattern.",source:"@site/docs/advanced/observer-pattern.md",sourceDirName:"advanced",slug:"/advanced/observer-pattern",permalink:"/froyo/docs/advanced/observer-pattern",draft:!1,editUrl:"https://github.com/marksmccann/froyo/docs/advanced/observer-pattern.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Typechecking State",permalink:"/froyo/docs/advanced/typechecking-state"},next:{title:"External Control",permalink:"/froyo/docs/advanced/external-control"}},c={},p=[{value:"Subscribing to instance",id:"subscribing-to-instance",level:2},{value:"Removing an observer",id:"removing-an-observer",level:2}],l={toc:p};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"observer-pattern"},"Observer Pattern"),(0,o.kt)("p",null,"This guide introduces the concept of the ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Observer_pattern"},"observer pattern"),"."),(0,o.kt)("h2",{id:"subscribing-to-instance"},"Subscribing to instance"),(0,o.kt)("p",null,"It is possible for external processes to respond to internal state changes of a component instance. This is done by subscribing to a specific state property via the ",(0,o.kt)("a",{parentName:"p",href:"/froyo/docs/api/define-component#subscribe"},(0,o.kt)("inlineCode",{parentName:"a"},"subscribe"))," method. This method takes the name of the state property to be monitored along with a callback function (known as an observer). When the state value changes, this function will be called with the current and previous value of the property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const instance = new FrozenYogurt(rootElement);\n\ninstance.subscribe('<some-state>', (value, previousValue) => {\n    /* The value changed, do something ... */\n});\n")),(0,o.kt)("br",null),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"removing-an-observer"},"Removing an observer"),(0,o.kt)("p",null,"An individual observer can be removed from the instance via the ",(0,o.kt)("a",{parentName:"p",href:"/froyo/docs/api/define-component#unsubscribe"},(0,o.kt)("inlineCode",{parentName:"a"},"unsubscribe"))," method. To successfully work, the provided function must be the same as the one passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"subscribe"),". When the component instance is ",(0,o.kt)("a",{parentName:"p",href:"/froyo/docs/api/define-component#destroy"},"destroyed"),", all observers are removed automatically."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function myObserver() {}\n\ninstance.subscribe('<some-state>', myObserver);\ninstance.unsubscribe('<some-state>', myObserver);\n")))}u.isMDXComponent=!0}}]);