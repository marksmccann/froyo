"use strict";(self.webpackChunkfroyo=self.webpackChunkfroyo||[]).push([[2480],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=i,f=d["".concat(p,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(f,r(r({ref:t},c),{},{components:n})):a.createElement(f,r({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9605:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const o={},r="Component Lifecycle",l={unversionedId:"fundamentals/component-lifecycle",id:"fundamentals/component-lifecycle",title:"Component Lifecycle",description:"This guide introduces the concept of the component lifecycle.",source:"@site/docs/fundamentals/component-lifecycle.md",sourceDirName:"fundamentals",slug:"/fundamentals/component-lifecycle",permalink:"/froyo/docs/fundamentals/component-lifecycle",draft:!1,editUrl:"https://github.com/marksmccann/froyo/docs/fundamentals/component-lifecycle.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Handling Updates",permalink:"/froyo/docs/fundamentals/handling-updates"},next:{title:"Creating Listeners",permalink:"/froyo/docs/fundamentals/creating-listeners"}},p={},s=[{value:"The Lifecycle Methods",id:"the-lifecycle-methods",level:2},{value:"Adding Lifecycle Methods to a Class",id:"adding-lifecycle-methods-to-a-class",level:2},{value:"Setting State Correctly",id:"setting-state-correctly",level:2},{value:"Determining the Initial State",id:"determining-the-initial-state",level:2}],c={toc:s};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"component-lifecycle"},"Component Lifecycle"),(0,i.kt)("p",null,"This guide introduces the concept of the component lifecycle."),(0,i.kt)("h2",{id:"the-lifecycle-methods"},"The Lifecycle Methods"),(0,i.kt)("p",null,'When a component is initialized, or when the state changes, a series of "lifecycle" methods are called in a particular order. Each method has a designated responsibility relative to its position in the lifecycle.'),(0,i.kt)("p",null,"The methods are: ",(0,i.kt)("a",{parentName:"p",href:"/froyo/docs/api/component#initialize"},(0,i.kt)("inlineCode",{parentName:"a"},"initialize")),", ",(0,i.kt)("a",{parentName:"p",href:"/froyo/docs/api/component#validate"},(0,i.kt)("inlineCode",{parentName:"a"},"validate")),", ",(0,i.kt)("a",{parentName:"p",href:"/froyo/docs/api/component#render"},(0,i.kt)("inlineCode",{parentName:"a"},"render")),", ",(0,i.kt)("a",{parentName:"p",href:"/froyo/docs/api/component#update"},(0,i.kt)("inlineCode",{parentName:"a"},"update")),", ",(0,i.kt)("a",{parentName:"p",href:"/froyo/docs/api/component#destroy"},(0,i.kt)("inlineCode",{parentName:"a"},"destroy")),"."),(0,i.kt)("p",null,"When initialized, the methods are called once in this order:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"initialize")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"validate")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"render")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"update"))),(0,i.kt)("p",null,"Every time the component state is updated (via ",(0,i.kt)("a",{parentName:"p",href:"/froyo/docs/api/component#setstate"},(0,i.kt)("inlineCode",{parentName:"a"},"setState")),"), they are called in this order:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"validate")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"render")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"update"))),(0,i.kt)("p",null,"When the component needs to be removed, ",(0,i.kt)("inlineCode",{parentName:"p"},"destroy")," must be called manually."),(0,i.kt)("br",null),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"adding-lifecycle-methods-to-a-class"},"Adding Lifecycle Methods to a Class"),(0,i.kt)("p",null,"When defining a component, the ",(0,i.kt)("inlineCode",{parentName:"p"},"render")," method is required. However, the other lifecycle methods are optional and should only be included when needed. See the ",(0,i.kt)("a",{parentName:"p",href:"/froyo/docs/api/component#instance-methods"},"API reference")," to learn more."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"class FrozenYogurt extends Component {\n    initialize() {\n        /* perform setup tasks */\n    }\n\n    destroy() {\n        /* perform cleanup tasks */\n    }\n\n    validate() {\n        /* perform validation before render */\n    }\n\n    update() {\n        /* perform updates after render */\n    }\n\n    render() {\n        /* perform DOM updates */\n    }\n}\n")),(0,i.kt)("br",null),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"setting-state-correctly"},"Setting State Correctly"),(0,i.kt)("p",null,"The state cannot be updated directly. In fact, if you attempt to do so (outside of ",(0,i.kt)("inlineCode",{parentName:"p"},"initialize"),"), it will not work and an error message will log to the console."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// Incorrect\nthis.state = { flavor: 'Vanilla' };\n")),(0,i.kt)("p",null,"Setting the value of a specific state property also will not work, but an error will not be logged."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// Incorrect\nthis.state.flavor = 'Vanilla';\n")),(0,i.kt)("p",null,"Instead, use ",(0,i.kt)("a",{parentName:"p",href:"/froyo/docs/api/component#setstate"},(0,i.kt)("inlineCode",{parentName:"a"},"setState"))," which will update the state and kick-off the component lifecycle."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"setState")," will only kick-off the component lifecycle if there were changes to the state. The ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality"},"strict equality operator")," (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"==="),") is used to determine which values have changed. This means that objects and arrays must be replaced in order for their changes to be recognized.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// Correct\nthis.setState({ flavor: 'Vanilla' });\n")),(0,i.kt)("p",null,"The only place where it is appropriate to set ",(0,i.kt)("inlineCode",{parentName:"p"},"this.state")," directly is in ",(0,i.kt)("inlineCode",{parentName:"p"},"initialize"),"."),(0,i.kt)("br",null),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"determining-the-initial-state"},"Determining the Initial State"),(0,i.kt)("p",null,"When a component begins initialization, before the ",(0,i.kt)("inlineCode",{parentName:"p"},"initialize")," method is called, data is collected from the following three sources, merged, and assigned to ",(0,i.kt)("inlineCode",{parentName:"p"},"this.state"),". In reverse order of priority, those sources are:"),(0,i.kt)("p",null,"1","."," The ",(0,i.kt)("a",{parentName:"p",href:"/froyo/docs/api/component#defaultstate"},(0,i.kt)("inlineCode",{parentName:"a"},"defaultState"))," from the class definition."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"class FrozenYogurt extends Component {\n    static get defaultState() {\n        return {\n            flavor: 'Vanilla',\n        };\n    }\n}\n")),(0,i.kt)("p",null,"2","."," The ",(0,i.kt)("inlineCode",{parentName:"p"},"data-initial-state")," HTML attribute from the root element."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The value of this attribute must be valid JSON. See ",(0,i.kt)("a",{parentName:"p",href:"/froyo/docs/fundamentals/html-only-usage"},'"HTML-only Usage"')," to learn more about this feature and its particular usefulness when paired with the ",(0,i.kt)("a",{parentName:"p",href:"/froyo/docs/api/create-initializer"},'"Create Initializer"')," tool.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<div data-initial-state=\'{"flavor": "vanilla"}\'></div>\n')),(0,i.kt)("p",null,"3","."," The ",(0,i.kt)("inlineCode",{parentName:"p"},"initialState")," passed to the second argument of the constructor."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const instance = new FrozenYogurt(rootElement, { flavor: 'Vanilla' });\n")),(0,i.kt)("br",null),(0,i.kt)("p",null,"By the time ",(0,i.kt)("inlineCode",{parentName:"p"},"initialize")," is called, the data from the sources above have been merged and are available on ",(0,i.kt)("inlineCode",{parentName:"p"},"this.state"),". While in this method, ",(0,i.kt)("inlineCode",{parentName:"p"},"this.state")," can by set directly. Ultimately, whatever the state is at the end of this method, will be the initial state of the component. Keep in mind that assignments to ",(0,i.kt)("inlineCode",{parentName:"p"},"this.state")," extend the existing object, they do not replace it."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Sometimes, initial state properties must be set dynamically (e.g. referencing the viewport width to determine the initial layout of a component). This is the appropriate place to perform that logic. Alternatively, calling ",(0,i.kt)("inlineCode",{parentName:"p"},"setState")," from the ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," method would also be appropriate, if the logic can wait until after the initial render of the component.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"class FrozenYogurt extends Component {\n    initialize() {\n        this.state = {\n            flavor: 'Vanilla',\n        };\n    }\n}\n")))}d.isMDXComponent=!0}}]);