"use strict";(self.webpackChunkfroyo=self.webpackChunkfroyo||[]).push([[5785],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),b=o,m=u["".concat(c,".").concat(b)]||u[b]||d[b]||a;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=b;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},4341:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={},s="Observer Pattern",i={unversionedId:"advanced/observer-pattern",id:"advanced/observer-pattern",title:"Observer Pattern",description:"This guide introduces the concept of the observer pattern.",source:"@site/docs/advanced/observer-pattern.md",sourceDirName:"advanced",slug:"/advanced/observer-pattern",permalink:"/froyo/docs/advanced/observer-pattern",draft:!1,editUrl:"https://github.com/marksmccann/froyo/docs/advanced/observer-pattern.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Component Validation",permalink:"/froyo/docs/advanced/component-validation"},next:{title:"External Control",permalink:"/froyo/docs/advanced/external-control"}},c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Subscribing to Instance",id:"subscribing-to-instance",level:2},{value:"Removing the Observer",id:"removing-the-observer",level:2}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"observer-pattern"},"Observer Pattern"),(0,o.kt)("p",null,"This guide introduces the concept of the observer pattern."),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Observer_pattern"},"observer pattern")," is a software design pattern in which an object maintains a list of dependents, called observers, and notifies them automatically of any state changes."),(0,o.kt)("p",null,"In Froyo, an observer is a callback function that is ",(0,o.kt)("a",{parentName:"p",href:"#subscribing-to-instance"},"subscribed to the instance"),". When the state of the component changes, this function will be called in the order it was subscribed (after the ",(0,o.kt)("a",{parentName:"p",href:"/froyo/docs/fundamentals/component-lifecycle#the-lifecycle-methods"},"lifecycle methods"),"). This observer can be used to perform any number of actions. The arguments provided to the observer can be used to filter the actions. See ",(0,o.kt)("a",{parentName:"p",href:"/froyo/docs/fundamentals/handling-updates"},'"Handling Updates"')," to learn more."),(0,o.kt)("br",null),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"subscribing-to-instance"},"Subscribing to Instance"),(0,o.kt)("p",null,"To subscribe an observer to the instance, create a callback function and pass it to the ",(0,o.kt)("a",{parentName:"p",href:"/froyo/docs/api/component#subscribe"},(0,o.kt)("inlineCode",{parentName:"a"},"subscribe"))," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const instance = new FrozenYogurt(rootElement);\n\ninstance.subscribe(() => {\n    /* the state changed, do something ... */\n});\n")),(0,o.kt)("br",null),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"removing-the-observer"},"Removing the Observer"),(0,o.kt)("p",null,"An individual observer can be removed from the instance via the ",(0,o.kt)("a",{parentName:"p",href:"/froyo/docs/api/component#unsubscribe"},(0,o.kt)("inlineCode",{parentName:"a"},"unsubscribe"))," method. The function passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"unsubscribe")," must be a direct reference to the same function passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"subscribe"),". This method is rarely necessary because all observers are automatically removed when the component is destroyed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function myObserver() {}\n\ninstance.subscribe(myObserver);\ninstance.unsubscribe(myObserver);\n")))}u.isMDXComponent=!0}}]);